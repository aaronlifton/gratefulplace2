---
- hosts: app
  sudo: true

  tasks:
  - name: Create the project directory.
    file: state=directory path=${project_root}

  - name: Create user.
    user: home=${project_root}/home/ name=${project_name} state=present

  - name: Update the project directory.
    file: group=${project_name} owner=${project_name} mode=755 state=directory path=${project_root}
    
  - name: Create the code directory.
    file: group=${project_name} owner=${project_name} mode=755 state=directory path=${project_root}/code/

  - name: Allow new package repos
    apt: pkg=software-properties-common state=installed update-cache=yes

  - name: Add nodejs repo
    apt_repository: repo=ppa:chris-lea/node.js

  - name: install grunt
    shell: npm install -g grunt-cli
    
  - name: Install required system packages.
    apt: pkg=${item} state=installed update-cache=yes
    with_items: ${system_packages}

#   - name: Install required Python packages.
#     easy_install: name=${item}
#     with_items: ${python_packages}

#   - name: Mount code folder.
#     mount: fstype=vboxsf opts=uid=${project_name},gid=${project_name} name=${project_root}/code/ src=${project_name} state=mounted
#     only_if: "$vm == 1"

#   - name: Create the SSH directory.
#     file: state=directory path=${project_root}/home/.ssh/
#     only_if: "$vm == 0"
# 
#   - name: Upload SSH known hosts.
#     copy: src=known_hosts dest=${project_root}/home/.ssh/known_hosts mode=0600
#     only_if: "$vm == 0"
# 
#   - name: Upload SSH key.
#     copy: src=key dest=${project_root}/home/.ssh/id_rsa mode=0600
#     only_if: "$vm == 0"
# 
#   - name: Create the SSL directory.
#     file: state=directory path=${project_root}/home/ssl/
# 
#   - name: Upload SSL private key.
#     copy: src=files/ssl/${project_name}.pem dest=${project_root}/home/ssl/${project_name}.pem
# 
#   - name: Upload SSH public key.
#     copy: src=files/ssl/${project_name}.key.encrypted dest=${project_root}/home/ssl/${project_name}.key

  - name: Change permissions.
    shell: chown -R ${project_name}:${project_name} ${project_root}

#   - name: Install nginx configuration file.
#     copy: src=files/conf/nginx.conf dest=/etc/nginx/sites-enabled/${project_name}
#     notify: restart nginx
# 
#   - name: Install init scripts.
#     copy: src=files/init/${item}.conf dest=/etc/init/${project_name}_${item}.conf
#     with_items: ${initfiles}
# 
#   - name: Create database.
#     shell: ${project_root}/env/bin/python ${project_root}/code/webapp/manage.py sqlcreate --router=default | sudo -u postgres psql

  - name: Get leiningen
    get_url: url=https://raw.github.com/technomancy/leiningen/stable/bin/lein dest=/usr/local/bin/lein
    
  - name: Leiningen permissions
    shell: chmod +x /usr/local/bin/lein

#   handlers:
#     - include: handlers.yml
- hosts: database
  sudo: true

  tasks:
  - name: Create datomic user.
    user: name=datomic state=present

  - name: Create datomic data directory
    file: state=directory path=${datomic_data_dir}

  - name: Change data permissions
    shell: chown -R datomic:datomic ${datomic_data_dir}

  - name: Make datomic log directory
    file: state=directory path=/var/log/datomic
    
  - name: Change data permissions
    shell: chown -R datomic:datomic /var/log/datomic

  - name: Check datomic installation
    command: "ls ${datomic_dir}/${datomic_filename}"
    register: datomic_exists
    ignore_errors: true

  - name: Create datomic directory
    file: state=directory path=${datomic_dir}
    when: datomic_exists|failed

  - name: Download datomic
    get_url: url=http://downloads.datomic.com/${datomic_version}/${datomic_filename}.zip dest=${datomic_dir}
    when: datomic_exists|failed

  - name: Unpack datomic
    command: chdir=${datomic_dir} unzip ${datomic_filename}.zip
    when: datomic_exists|failed

  - name: Upload datomic properties file
    copy: src=files/datomic-transactor.properties dest=${datomic_dir}/transactor.properties
    when: datomic_exists|failed
    
  - name: Upload datomic upstart config file
    copy: src=files/datomic-upstart.conf dest=/etc/init/datomic.conf
    when: datomic_exists|failed
    
  - name: Link datomic
    command: ln -s ${datomic_dir}/${datomic_filename} ${datomic_dir}/runtime
    when: datomic_exists|failed

  - name: Change lib permissions
    shell: chown -R datomic:datomic ${datomic_dir}

  - name: ensure datomic is running
    service: name=datomic state=started
